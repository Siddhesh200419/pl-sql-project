CREATE TABLE Customers ( 
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    Name VARCHAR2(100) NOT NULL, 
    Email VARCHAR2(100) UNIQUE NOT NULL, 
    Phone VARCHAR2(15), 
    Address VARCHAR2(200), 
    CreatedDate DATE DEFAULT SYSDATE 
);

CREATE TABLE Agents ( 
    AgentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    Name VARCHAR2(100) NOT NULL, 
    Email VARCHAR2(100), 
    Phone VARCHAR2(15), 
    CommissionRate NUMBER(5, 2) DEFAULT 10 
);

CREATE TABLE Destinations ( 
    DestinationID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    Name VARCHAR2(100) NOT NULL, 
    Country VARCHAR2(100) NOT NULL, 
    Description VARCHAR2(500), 
    Popularity NUMBER DEFAULT 0 
);

CREATE TABLE TourPackages ( 
    PackageID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    Name VARCHAR2(100) NOT NULL, 
    DestinationID NUMBER REFERENCES Destinations(DestinationID), 
    Description VARCHAR2(500), 
    Price NUMBER(10, 2) NOT NULL, 
    Duration NUMBER NOT NULL -- in days 
);

CREATE TABLE Bookings ( 
    BookingID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    CustomerID NUMBER REFERENCES Customers(CustomerID), 
    PackageID NUMBER REFERENCES TourPackages(PackageID), 
    BookingDate DATE DEFAULT SYSDATE, 
    TotalAmount NUMBER(10, 2) NOT NULL, 
    AgentID NUMBER REFERENCES Agents(AgentID), 
    Status VARCHAR2(50) DEFAULT 'Pending' 
);

CREATE TABLE Payments ( 
    PaymentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    BookingID NUMBER REFERENCES Bookings(BookingID), 
    PaymentDate DATE DEFAULT SYSDATE, 
    Amount NUMBER(10, 2) NOT NULL, 
    PaymentMethod VARCHAR2(50) CHECK (PaymentMethod IN ('Credit Card', 'Debit Card', 'UPI', 'Net Banking')) 
);

CREATE TABLE Transport ( 
    TransportID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    Type VARCHAR2(50) CHECK (Type IN ('Flight', 'Bus', 'Train', 'Car', 'Helicopter', 'Boat', 'Bike', 'Metro', 'Tram', 'SUV')),  
    Capacity NUMBER NOT NULL, 
    PricePerSeat NUMBER(10, 2) NOT NULL 
);

CREATE TABLE Reviews ( 
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    CustomerID NUMBER REFERENCES Customers(CustomerID), 
    PackageID NUMBER REFERENCES TourPackages(PackageID), 
    Rating NUMBER CHECK (Rating BETWEEN 1 AND 5), 
    Comments VARCHAR2(1000), 
    ReviewDate DATE DEFAULT SYSDATE 
);



INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Alice Johnson', 'alice@gmail.com', '1234567890', '123 Elm Street');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Bob Smith', 'bob@gmail.com', '9876543210', '456 Oak Avenue');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Charlie Adams', 'charlie@gmail.com', '5551234567', '789 Maple Lane');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('David Brown', 'david@gmail.com', '4445556666', '22 Pine Street');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Eve White', 'eve@gmail.com', '7778889999', '88 Birch Road');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Frank Green', 'frank@gmail.com', '1112223333', '15 Cedar Street');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Grace Miller', 'grace@gmail.com', '9998887777', '99 Spruce Lane');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Hank Wilson', 'hank@gmail.com', '3334445555', '43 Palm Avenue');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Ivy Carter', 'ivy@gmail.com', '8887776666', '27 Maple Drive');

INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Jack Taylor', 'jack@gmail.com', '5556667777', '76 Cherry Lane');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Paris', 'France', 'The city of light and love.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Maldives', 'Maldives', 'Tropical paradise with white sandy beaches.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Tokyo', 'Japan', 'A blend of tradition and modernity.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('New York', 'USA', 'The city that never sleeps.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Sydney', 'Australia', 'A coastal city with iconic landmarks.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Dubai', 'UAE', 'Luxury and modern architecture.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('London', 'UK', 'Rich history and culture.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Rome', 'Italy', 'Home to ancient ruins and art.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Bangkok', 'Thailand', 'Vibrant nightlife and temples.');

INSERT INTO Destinations (Name, Country, Description) VALUES ('Cape Town', 'South Africa', 'Natural beauty and rich history.');

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Romantic Paris Getaway', 1, '5-day tour of Paris', 1200.00, 5);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Maldives Honeymoon Special', 2, '7-day Maldives package', 3000.00, 7);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Tokyo Explorer', 3, '10-day tour of Tokyo and surrounding areas', 2000.00, 10);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('New York Adventure', 4, '7-day tour of New York', 1800.00, 7);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Sydney Coastal Experience', 5, '6-day tour of Sydney', 1500.00, 6);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Dubai Luxury Escape', 6, '4-day tour of Dubai', 2500.00, 4);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('London Heritage Tour', 7, '5-day tour of London', 1700.00, 5);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Roman Holiday', 8, '3-day tour of Rome', 1300.00, 3);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Bangkok Nightlife Special', 9, '5-day tour of Bangkok', 1400.00, 5);

INSERT INTO TourPackages (Name, DestinationID, Description, Price, Duration) VALUES ('Cape Town Scenic Getaway', 10, '7-day tour of Cape Town', 2000.00, 7);

INSERT INTO Agents (Name, Email, Phone) VALUES ('TravelX Agent', 'agent@travelx.com', '1122334455');

INSERT INTO Agents (Name, Email, Phone) VALUES ('ExploreMore Agent', 'agent2@exploremore.com', '2233445566');

INSERT INTO Agents (Name, Email, Phone) VALUES ('Wanderlust Agent', 'agent3@wanderlust.com', '3344556677');

INSERT INTO Agents (Name, Email, Phone) VALUES ('Adventure Agent', 'agent4@adventure.com', '4455667788');

INSERT INTO Agents (Name, Email, Phone) VALUES ('LuxuryTours Agent', 'agent5@luxurytours.com', '5566778899');

INSERT INTO Agents (Name, Email, Phone) VALUES ('Global Explorer', 'agent6@globalexplorer.com', '6677889900');

INSERT INTO Agents (Name, Email, Phone) VALUES ('Holiday Planner', 'agent7@holidayplanner.com', '7788990011');

INSERT INTO Agents (Name, Email, Phone) VALUES ('EcoTraveler Agent', 'agent8@ecotraveler.com', '8899001122');

INSERT INTO Agents (Name, Email, Phone) VALUES ('Backpack Tours', 'agent9@backpacktours.com', '9900112233');

INSERT INTO Agents (Name, Email, Phone) VALUES ('Family Fun Agent', 'agent10@familyfun.com', '1011121314');

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Flight', 180, 150.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Bus', 50, 25.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Train', 300, 50.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Car', 4, 100.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Helicopter', 6, 500.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Boat', 50, 75.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Bike', 2, 15.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Metro', 100, 10.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('Tram', 60, 20.00);

INSERT INTO Transport (Type, Capacity, PricePerSeat) VALUES ('SUV', 7, 200.00);

CREATE OR REPLACE PROCEDURE CreateBooking ( 
    p_CustomerID IN NUMBER, 
    p_PackageID IN NUMBER, 
    p_TotalAmount IN NUMBER, 
    p_AgentID IN NUMBER 
) AS 
BEGIN 
    INSERT INTO Bookings (CustomerID, PackageID, TotalAmount, AgentID) 
    VALUES (p_CustomerID, p_PackageID, p_TotalAmount, p_AgentID); 
 
    DBMS_OUTPUT.PUT_LINE('Booking created successfully for Customer ID: ' || p_CustomerID); 
EXCEPTION 
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM); 
END; 
/

BEGIN 
    CreateBooking(1, 1, 1200.00, 1); 
END;
/

SELECT * FROM Bookings WHERE CustomerID = 1;

SELECT Name, Popularity FROM Destinations  
WHERE DestinationID = (SELECT DestinationID FROM TourPackages WHERE PackageID = 1);


CREATE OR REPLACE PROCEDURE CancelBooking ( 
    p_BookingID IN NUMBER 
) AS 
BEGIN 
    UPDATE Bookings 
    SET Status = 'Cancelled' 
    WHERE BookingID = p_BookingID; 
 
    DBMS_OUTPUT.PUT_LINE('Booking with ID ' || p_BookingID || ' has been cancelled.'); 
EXCEPTION 
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM); 
END; 
/

Begin  
    CancelBooking(1);  
End;
/

SELECT * FROM Bookings WHERE BookingID = 1;


CREATE OR REPLACE PROCEDURE RevenueReport IS 
    v_TotalRevenue NUMBER; 
BEGIN 
    SELECT SUM(TotalAmount) INTO v_TotalRevenue FROM Bookings WHERE Status = 'Pending'; 
    DBMS_OUTPUT.PUT_LINE('Total Revenue: ' || v_TotalRevenue); 
END; 
/

Begin 
    RevenueReport(); 
End;
/

CREATE OR REPLACE PROCEDURE PopularDestinations IS 
    CURSOR dest_cursor IS 
        SELECT Name, Popularity FROM Destinations ORDER BY Popularity DESC; 
BEGIN 
    FOR rec IN dest_cursor LOOP 
        DBMS_OUTPUT.PUT_LINE('Destination: ' || rec.Name || ' - Popularity: ' || rec.Popularity); 
    END LOOP; 
END; 
/

Begin  
 	PopularDestinations(); 
End;
/

CREATE OR REPLACE PROCEDURE SubmitReview ( 
    p_CustomerID IN NUMBER, 
    p_PackageID IN NUMBER, 
    p_Rating IN NUMBER, 
    p_Comments IN VARCHAR2 
) AS 
BEGIN 
    INSERT INTO Reviews (CustomerID, PackageID, Rating, Comments) 
    VALUES (p_CustomerID, p_PackageID, p_Rating, p_Comments); 
 
    DBMS_OUTPUT.PUT_LINE('Review submitted successfully for Customer ID: ' || p_CustomerID); 
EXCEPTION 
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM); 
END; 
/

Begin
 SubmitReview(1, 1, 5, 'Excellent package!')
 End;
 /
 
SELECT * FROM Reviews WHERE CustomerID = 1;

CREATE OR REPLACE TRIGGER UpdatePopularity 
AFTER INSERT ON Bookings 
FOR EACH ROW 
BEGIN 
    UPDATE Destinations 
    SET Popularity = Popularity + 1 
    WHERE DestinationID = (SELECT DestinationID FROM TourPackages WHERE PackageID = :NEW.PackageID); 
END; 
/

ALTER TABLE Bookings ADD TransportID NUMBER;

CREATE OR REPLACE PROCEDURE AssignTransport ( 
    p_BookingID IN NUMBER, 
    p_TransportID IN NUMBER 
) AS 
BEGIN 
    -- Assume a new column in Bookings to store TransportID 
    UPDATE Bookings 
    SET TransportID = p_TransportID 
    WHERE BookingID = p_BookingID; 
 
    DBMS_OUTPUT.PUT_LINE('Transport assigned successfully for Booking ID: ' || p_BookingID); 
EXCEPTION 
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM); 
END; 
/

   

CREATE OR REPLACE PROCEDURE AssignTransport ( 
    p_BookingID IN NUMBER, 
    p_TransportID IN NUMBER 
) AS 
BEGIN 
    -- Update the TransportID in the Bookings table 
    UPDATE Bookings 
    SET TransportID = p_TransportID 
    WHERE BookingID = p_BookingID; 
 
    DBMS_OUTPUT.PUT_LINE('Transport assigned successfully for Booking ID: ' || p_BookingID); 
EXCEPTION 
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM); 
END; 
/

CREATE OR REPLACE TRIGGER EnsurePayment 
AFTER INSERT ON Bookings 
FOR EACH ROW 
BEGIN 
    INSERT INTO Payments (BookingID, Amount, PaymentMethod) 
    VALUES (:NEW.BookingID, :NEW.TotalAmount, 'Credit Card'); 
END; 
/


SELECT * FROM Customers;

SELECT * FROM Destinations;

SELECT * FROM TourPackages;

SELECT * FROM Bookings;

SELECT * FROM Payments;

SELECT * FROM Reviews;